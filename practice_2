package practice;

interface BeaMin {
	public void deliver();
}

abstract class Vehicle {
	
	protected int velocity;
	protected int wheelNum;
	public String carName;
	public Vehicle() {
		wheelNum = 6;
		velocity = 0;
	}
	public void setCarName(String name) {
		carName = name;
	}
	public abstract void speedUp();
}

class Car implements BeaMin
{
	protected int velocity;
	protected int wheelNum;
	protected String carName;
	public void deliver() {
		System.out.println("자동차로 배달합니다.");
	}
	public Car()
	{
		wheelNum = 4;
		velocity = 100;
	}
	public void speedUp()
	{
		velocity++;
	}
}

class Cycle implements BeaMin
{
	int velocity;
	public void deliver()
	{
		System.out.println("자전거로 배달합니다.");
	}
	
	public void speedUp()
	{
		velocity++;
	}
}

public class Truck extends Car implements BeaMin {
	public void speedUp()
	{
		velocity += 30;
	}
	public void warn()
	{
		System.out.println("경적을 울림");
	}
	
	public void deliver()
	{
		System.out.println("트럭으로 배달합니다.");
	}

	public static void main(String[] args) {
		
		Truck myTruck = new Truck();
		myTruck.speedUp();
		System.out.println("트럭의 속도 " + myTruck.velocity);
		
		Car myCar = new Car();
		myCar.speedUp();
		System.out.println("트럭의 속도 " + myCar.velocity);
		
		BeaMin myBeaMin = new Car();
		myBeaMin.warn();
		
		BeaMin myBeaMin = new Cycle();
		myBeaMin.deliver();
		myBeaMin = myTruck;
		myBeaMin.deliver();
	}

}
